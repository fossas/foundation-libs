use anyhow::Context;
use clap::{Parser, Subcommand};
use tracing_subscriber::{prelude::*, Registry};

mod cmd;

/// Reads trace files generated by FOSSA Rust programs offline,
/// then emits them in more readable formats with filtering and summarizing.
///
/// Different subcommands are intended to read the output of different FOSSA programs,
/// and will provide summarization and/or user configuration depending on the goal
/// of those programs.
#[derive(Debug, Parser)]
#[clap(version)]
struct Application {
    /// Set the minimum level for reported logs. Logs below this level are dropped.
    #[clap(long, global = true, default_value_t = traceconf::Level::default())]
    trace_level: traceconf::Level,

    /// Enable reporting span traces. Span traces report on units of work performed by the program.
    #[clap(long, global = true, default_value_t = traceconf::Span::default())]
    trace_spans: traceconf::Span,

    /// Different programs have different subcommands for parsing their trace output.
    #[clap(subcommand)]
    command: Commands,
}

impl Application {
    /// Translate the level selected by the user into the format used by [`tracing`].
    pub fn level_filter(&self) -> tracing::metadata::LevelFilter {
        self.trace_level.into()
    }

    /// Translate the span strategy selected by the user into the format used by [`tracing_subscriber`].
    pub fn fmt_span(&self) -> tracing_subscriber::fmt::format::FmtSpan {
        self.trace_spans.into()
    }
}

#[derive(Clone, Debug, Subcommand)]
#[non_exhaustive]
enum Commands {
    /// Parse the traces emitted by the `diagnose` tool in the FOSSA CLI repo,
    /// and display summary data relevant to that tool.
    Diagnose(cmd::diagnose::Arguments),
}

fn main() -> anyhow::Result<()> {
    let app = Application::parse();

    // Tracer uses tracing to re-export the traces it reads offline.
    let subscriber = Registry::default().with(
        tracing_subscriber::fmt::layer()
            .with_file(false)
            .without_time()
            .with_target(false)
            .with_line_number(false)
            .with_span_events(app.fmt_span())
            .with_filter(app.level_filter()),
    );
    tracing::subscriber::set_global_default(subscriber)
        .context("install global trace subscriber")?;

    match app.command {
        Commands::Diagnose(args) => cmd::diagnose::main(args, app.trace_level),
    }
}
