name: release vsi

on:
  pull_request:
  push: 
    tags:
      - 'vsi-[0-9]+.[0-9]+.[0-9]+'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    name: ${{ matrix.os-name }} build
    runs-on: ${{ matrix.os }}
    container: ghcr.io/jssblck/rust-ci

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
        include:
          - os: ubuntu-latest
            os-name: linux

          - os: macos-latest
            os-name: macos

          - os: windows-latest
            os-name: windows

    steps:
    # Check out the repo
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2

    # Install system dependencies
    - if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        sudo apt-get update
        sudo apt-get install -y libarchive-dev build-essential nettle-dev libacl1-dev libbz2-dev liblzma-dev liblz4-dev libzstd-dev lzop zlib1g-dev
    - if: ${{ contains(matrix.os, 'macos') }}
      run: |
        brew install pkgconfig libarchive
        echo PKG_CONFIG_PATH=$(brew ls libarchive | grep .pc$ | sed 's|/libarchive.pc||') >> $GITHUB_ENV
    - if: ${{ contains(matrix.os, 'windows') }}
      uses: actions/cache@v3
        with:
          path: C:/Users/runneradmin/AppData/Local/vcpkg/archives
          key: ${{ runner.os }}-vcpkg-cache-x64-windows-static
    - if: ${{ contains(matrix.os, 'windows') }}
      run: |
        vcpkg integrate install
        vcpkg install libarchive:x64-windows-static

    # Test
    - run: cargo check --release --all --bins --examples --tests
    - run: cargo nextest run
      env:
        FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        FOSSA_ORG_ID: ${{ secrets.FOSSA_ORG_ID }}
        ENABLE_NETWORK_TESTS: "1"

    # Set tagged version in Cargo.toml
    - run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_OUTPUT
    - run: sed -i "s/version = \"0.0.0\"/version = \"$GIT_VERSION\"/" Cargo.toml

    # Build, store output
    - run: cargo build --release --bin vsi
    - run: mkdir release && cp target/release/vsi release/vsi-${ matrix.os-name }
      if: ${{ !contains(matrix.os, 'windows') }}
    - run: mkdir release && cp target/release/vsi.exe release/vsi-${ matrix.os-name }.exe
      if: ${{ contains(matrix.os, 'windows') }}
    - run: find release -type f -exec sha256sum --binary {} > {}.sha256
    - run: strip release/*
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-assets
        path: release

  create-release:
    runs-on: ubuntu-latest
    needs: ['build-and-test']
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}

    steps:
    # Download and prep built artifacts for release
    - uses: actions/download-artifact@v2
    
    # Upload built artifacts to the release
    #
    # This creates the release as a draft;
    # it needs to have its changelog updated and marked as non-draft to complete the release.
    - uses: softprops/action-gh-release@v1
      if: ${{ startsWith(github.ref, 'refs/tags/v') }}
      with:
        files: release/*
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
